harvest_data:
  description: >
    Use all available tools to **collect, tag, and output raw market inputs** for each symbol. Each tool must operate **independently**, and output its results as structured JSON.

    1. **PoliticalNewsTool**:
       - Inputs:
         - `query`: A well-formed Boolean macroeconomic string (e.g., "inflation OR interest rates OR central bank").
         - `days_back`: Integer (how far back to search, e.g., 2).
       - DO NOT pass a dict ‚Äî use direct keyword arguments like:
         `{"query": "recession OR fiscal tightening", "days_back": 2}`

    2. **DataTool**:
       - For each symbol, retrieve:
         - Latest price
         - NAV
         - Volume
         - AUM (Assets Under Management)
         - Expense ratio (if available)
         - Fetch current market cap, P/E, EPS, revenue, net income, and free cash flow.
         - If dividend exists, include yield and payout ratio.
         - Tag each record with data source and retrieval time.
         - Include timestamps and source attribution if possible.


    3. **GlobalEventsTool**:
       - Search for macroeconomic events, central bank meetings, regulatory changes, or political risk events in major economies.
       - Tag by region (e.g., US, EU, China) and by likely affected sector if inferrable.

    **Symbol Handling**:
    - You will receive the symbol from the console:
    - Tools must process each symbol separately.
    - Handle API failures gracefully (retry, then tag ‚ÄúError‚Äù).

    **Output**:
    - Write 5 files:
      - `raw_political_news.json`
      - `raw_data.json`
      - `raw_global_events.json`

    **Constraints**:
    - Each file must be valid JSON and contain an array of records.
    - Do NOT summarize, aggregate, or drop any symbols unless there's a critical failure.
    - Validate that each file has been successfully written to disk.

  expected_output: >
    A confirmation message listing all five expected JSON files and confirming successful creation:
      ‚Ä¢ raw_political_news.json
      ‚Ä¢ raw_data.json
      ‚Ä¢ raw_global_events.json

    Example:
    "‚úÖ Successfully wrote 3 outputs: raw_political_news.json, raw_data.json, raw_global_events.json"

  agent: data_harvester_agent

fundamental_analysis:
  description: >
    For each symbol, perform a **standalone fundamental valuation**.

    1. **Valuation Metrics**:
       - Calculate: P/E, EV/EBITDA, PEG ratio, Price-to-Book (P/B), and dividend yield.
       - Include the current value, 1-year median, 5-year median, and z-score if available.
       - Use EV and EBITDA approximations based on available historical financials.

    2. **Benchmarking**:
       - Compare each metric to:
         a. the symbol‚Äôs own 1-year and 5-year history.
         b. sector peer group averages (provide sector if known or infer from metadata).
       - Highlight where metrics deviate significantly (¬±1.5 standard deviations or more).

    3. **Catalyst Detection**:
       - Identify recent earnings beats/misses.
       - Note guidance revisions, dividend announcements, insider transactions, or major filings.
       - Indicate whether the catalyst is likely to influence valuation short-term.

    4. **Drift Estimation**:
       - Predict **intraday drift** using recent price action vs. fundamental surprises.
       - If no clear signal, indicate ‚ÄúNeutral‚Äù drift with rationale.

    5. **Output Schema Requirements**:
       - Each symbol must be represented **independently**.
       - The output MUST contain:
         - `symbol`: ticker (e.g. NVDA, SPY)
         - `valuation_metrics`: dict of all computed metrics
         - `benchmarks`: dict of comparisons (1y, 5y, sector)
         - `catalysts`: list of detected events
         - `predicted_trend`: one of ['Up', 'Down', 'Neutral']
         - `confidence`: float between 0 and 1
         - `rationale`: short paragraph explaining the above

    6. **Non-Aggregation Rule**:
       - DO NOT summarize across symbols.
       - DO NOT generalize patterns or group insights ‚Äî each ticker is evaluated on its own merit.

    Symbols to analyze:
      ‚Ä¢ ETFs: {etf_symbols}
      ‚Ä¢ Equities: {equity_symbols}

  expected_output: >
    fundamental_summary.json as a JSON array, where each object includes:
      - symbol
      - valuation_metrics
      - benchmarks
      - catalysts
      - predicted_trend
      - confidence
      - rationale

    Example:
    ```json
    {
      "symbol": "NVDA",
      "valuation_metrics": { "P/E": 42.1, "EV/EBITDA": 28.4, ... },
      "benchmarks": { "1y_median": { ... }, "5y_median": { ... }, "sector": { ... } },
      "catalysts": ["Q1 earnings beat", "Raised Q2 revenue guidance"],
      "predicted_trend": "Up",
      "confidence": 0.86,
      "rationale": "Valuation is rich but supported by strong earnings and raised guidance. Sector-relative PEG is still below average."
    }
    ```

  agent: valuation_engine_agent

technical_analysis:
  description: >
    Analyze the last 5 OHLCV candles for each provided symbol (ETF or equity). 
    Your analysis must be structured, symbol-by-symbol, with no summarization across assets.

    For each symbol:
      1. Parse the OHLCV data into 5 most recent entries.
      2. Format each candle as:
         - DATE: O=X H=Y L=Z C=W Vol=V
      3. Apply technical analysis indicators:
         - RSI (Relative Strength Index)
         - MACD (Moving Average Convergence Divergence)
         - Bollinger Bands
         - Trendline / price drift
         - Pattern detection (e.g., head and shoulders, double top/bottom, flags, wedges)
      4. Provide directional interpretation:
         - `trend`: one of ‚ÄúUptrend‚Äù, ‚ÄúDowntrend‚Äù, ‚ÄúSideways‚Äù
         - `momentum_score`: float between -1.0 (strong bear) to +1.0 (strong bull)
         - `pattern_notes`: any detected patterns or signal commentary
      5. Call ForecastSignalTool on each ticker using the data in `close_price_map`.

    ‚ö†Ô∏è Do NOT aggregate across symbols.
    Each asset is evaluated independently.

    ---
    Input:
      You are provided with:
      - A formatted context variable called `formatted_ohlc_data`
        Example:
          **SPY** last 5 candles:
          - 2025-06-13: O=598.5 H=601.85 L=595.48 C=597 Vol=89,505,996
          - ...
          **NVDA** last 5 candles:
          - ...
      - Raw tickers:
        ‚Ä¢ ETFs: {etf_symbols}
        ‚Ä¢ Equities: {equity_symbols}

    üõ† Tools available:
      - MarketPriceTool: fetches intraday or daily price data
      - ForecastSignalTool: generates directional forecasts
      - OHLCFormatterTool: standardizes candle layout
      - (Optional) You may refer to classic TA indicators or signal libraries.

    Formatting Rules:
      - Markdown only
      - Use headings (`## SYMBOL`) per asset
      - List candles first, then indicators and interpretation
      - Always include each symbol, even if no patterns found
      - If no data is available, state ‚ÄúNo price data available for SYMBOL‚Äù

  expected_output: >
    A Markdown report that includes:
      ‚Ä¢ Last 5 OHLCV candles per symbol, properly formatted
      ‚Ä¢ RSI, MACD, Bollinger Band positioning
      ‚Ä¢ Pattern analysis
      ‚Ä¢ Interpretation with trend, momentum_score and pattern_notes
      ‚Ä¢ A separate section per symbol using `## SYMBOL` header

    Example:
    ## SPY
    - 2025-06-13: O=598.5 H=601.85 L=595.48 C=597 Vol=89,505,996
    - ...
    **Indicators**:
    - RSI: 62 (neutral)
    - MACD: Slightly bullish crossover detected
    - Bollinger: Approaching upper band
    **Interpretation**:
    - trend: Uptrend
    - momentum_score: +0.4
    - pattern_notes: Ascending triangle breakout in progress

    Repeat this structure for all symbols.

  agent: pattern_scanner_agent

compose_report:
  description: >
    Create a structured, readable, and clearly formatted markdown report for each provided ETF and equity.

    ‚úÖ For EACH ticker (ETF or equity), the report MUST include:
      - A header:
          ‚Ä¢ Use `## ETF Outlook - [SYMBOL]` or `## Equity Outlook - [SYMBOL]`
      - Raw or lightly processed content from:
          ‚Ä¢ fundamental_summary.json
          ‚Ä¢ technical_signals.json
      - A clearly separated block labeled ‚Äú**Final Outlook**‚Äù that includes:
          ‚Ä¢ Predicted trend direction (Uptrend, Downtrend, Sideways)
          ‚Ä¢ Confidence score (0.0 to 1.0)
          ‚Ä¢ Rationale (1-2 sentences, use the data, don't paraphrase)
      - A new section titled **Forecast Summary** under each ticker (if available), including:
          ‚Ä¢ `Next Day High`
          ‚Ä¢ `Next Day Low`
          ‚Ä¢ `Today High Estimate`
          ‚Ä¢ `Today Low Estimate`
          ‚Ä¢ `Advice`

    ‚ö†Ô∏è NEVER summarize across tickers.
    ‚ö†Ô∏è NEVER rewrite or condense fundamental or technical summaries.
    ‚ö†Ô∏è If any section is empty or missing for a symbol, insert:
        _‚ÄúNo data available for [symbol] in this section.‚Äù_

    üí° Formatting Rules:
      ‚Ä¢ Use Markdown syntax consistently
      ‚Ä¢ Symbols must appear in `**bold**` on first reference
      ‚Ä¢ Sections should be visually distinct with headings (`##`)
      ‚Ä¢ Include a timestamp footer at the end of the report in the format:
          _Report generated on YYYY-MM-DD at HH:MM EET_
      ‚Ä¢ Maintain a consistent order: fundamentals ‚Üí technicals ‚Üí final outlook
      ‚Ä¢ Do not editorialize ‚Äì this is a formatting and assembly task
        ### Forecast Summary
        - **Next Day High**: ...
        - **Next Day Low**: ...
        - **Today High Estimate**: ...
        - **Today Low Estimate**: ...
        - **Advice**: ...

    Input variables available:
      ‚Ä¢ ETFs: {etf_symbols}
      ‚Ä¢ Equities: {equity_symbols}

    üìÇ Refer to these files:
      ‚Ä¢ fundamental_summary.json
      ‚Ä¢ technical_signals.json
      ‚Ä¢ raw_political_news.json (optional)
      ‚Ä¢ raw_global_events.json (optional)

    Optional:
      - You may insert a brief section header at the top like:
        `# Daily Market Briefing - [DATE]`

  expected_output: >
    A fully formatted markdown document saved as daily_market_brief.md, 
    structured with one section per ticker, each containing:
      ‚Ä¢ Fundamental summary
      ‚Ä¢ Technical indicators
      ‚Ä¢ Final trend direction with confidence
    The document must end with a timestamp footer.

  output_file: daily_market_brief.md
  agent: report_composer_agent

compose_report_followup:
  description: >
    Append additional sections to the ongoing daily market briefing, ensuring each new ticker 
    (ETF or equity) receives its own clearly formatted markdown segment.

    ‚úÖ For EACH ticker, include:
      - A section header using `## ETF Outlook - [SYMBOL]` or `## Equity Outlook - [SYMBOL]`
      - Fundamental summary from fundamental_summary.json
      - Technical indicator block from technical_signals.json
      - A separate **Final Outlook** block showing:
          ‚Ä¢ Trend direction (Uptrend, Downtrend, Sideways)
          ‚Ä¢ Confidence score (0.0 to 1.0)
          ‚Ä¢ Brief rationale (1-2 lines max, derived directly from the inputs)
      - **Forecast Summary** (if available):
          ‚Ä¢ Next Day High
          ‚Ä¢ Next Day Low
          ‚Ä¢ Today High Estimate
          ‚Ä¢ Today Low Estimate
          ‚Ä¢ Advice

    üõë DO NOT:
      - Summarize across tickers
      - Skip sections unless the data is missing (in which case add a note)
      - Alter original data content ‚Äì format only

    ‚úÖ Formatting Guidelines:
      ‚Ä¢ Use Markdown
      ‚Ä¢ Bold each symbol on first reference
      ‚Ä¢ Maintain structure: fundamentals ‚Üí technicals ‚Üí outlook
      ‚Ä¢ Use dividers (e.g., `---`) between ticker sections for readability
      ‚Ä¢ Append a new timestamp at the end:
          _Appended on YYYY-MM-DD at HH:MM EET_

    Inputs:
      ‚Ä¢ ETFs: {etf_symbols}
      ‚Ä¢ Equities: {equity_symbols}
      ‚Ä¢ You should use the same formatting conventions as the initial report

    Reference files:
      ‚Ä¢ fundamental_summary.json
      ‚Ä¢ technical_signals.json
      ‚Ä¢ (optional) raw_political_news.json, raw_global_events.json

  expected_output: >
    A structured markdown report saved to daily_market_brief.md, appended with new
    sections for the tickers passed. Each section must be well-formatted and complete
    with fundamentals, technicals, and final outlook. A new timestamp must follow the 
    newly added content.

  output_file: daily_market_brief.md
  agent: report_composer_agent